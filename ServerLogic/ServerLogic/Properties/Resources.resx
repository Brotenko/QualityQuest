<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClearHelpMessage" xml:space="preserve">
    <value>usage: clear [--help]

DESCRIPTON

TODO

OPTIONS

--help
  Shows this.</value>
  </data>
  <data name="CurrentVersion" xml:space="preserve">
    <value>v0.0.1</value>
  </data>
  <data name="ExitHelpMessage" xml:space="preserve">
    <value>usage: exit [--help]

DESCRIPTON

Exits the application and thus terminates the ServerLogic and
closes the shell.

OPTIONS

--help
  Shows this.</value>
  </data>
  <data name="HelpHelpMessage" xml:space="preserve">
    <value>usage: qq [--version] [--help] &lt;password | password port&gt;

These are commands that can be used in various situations:

   password   Show or set the server-access password
   port       Show or set the port
   start      Start the server
   stop       Stop the server
   log        Show the logs
   clear      Clear the logs
   exit       Exit the shell

Use '&lt;command&gt; --help' to read about a specific command.</value>
  </data>
  <data name="InvalidPasswordExceptionMessage" xml:space="preserve">
    <value>Please make sure to set a password that doesn't start with a dash ("-"), is at least 8 characters in length, but no more than 32, and satisfies 3 out of the following 4 rules:
  At least one digit
  At least one lowercase character
  At least one uppercase character
  At least one special character</value>
  </data>
  <data name="InvalidPortExceptionMessage" xml:space="preserve">
    <value>Please make sure the port is an integer between 1024 and 65535.</value>
  </data>
  <data name="LogHelpMessage" xml:space="preserve">
    <value>usage: log [--help]

DESCRIPTON

TODO

OPTIONS

--help
  Shows this.</value>
  </data>
  <data name="PasswordHelpMessage" xml:space="preserve">
    <value>usage: password [--help] &lt;string&gt;

DESCRIPTON

Shows the password that is currently set and will be used to
connect to the ServerLogic. Alternatively it can also set a
new password.

If the command is of form 'password', the currently set password
will be shown.
If the command is of form 'password string', a new password
will be set according to the string provided.

OPTIONS

&lt;string&gt;
   The string that will be set as the new password used to
   access the ServerLogic through the Moderator-Client.

--help
   Shows this.</value>
  </data>
  <data name="PortHelpMessage" xml:space="preserve">
    <value>usage: port [--help] &lt;integer&gt;

DESCRIPTON

Shows the port that is currently set and will be used to set
up the WebSocket of the ServerLogic. Alternatively it can also
set a new port.

If the command is of form 'port', the currently set port will
be shown.
If the command is of form 'port integer', a new port will be
set according to the integer provided.

OPTIONS

&lt;integer&gt;
   The integer that will be set as the new port of the WebSocket
   of the ServerLogic.

--help
   Shows this.</value>
  </data>
  <data name="StartHelpMessage" xml:space="preserve">
    <value>usage: start [--help] [--password=&lt;string&gt;] [--port=&lt;integer&gt;]

DESCRIPTON

Starts the ServerLogic with the given password and port
Alternatively one can also pass options to start the change with
a different password and/or a different port.

If the command is of form 'start', the server will be set up
and started with the currently set password and port.

OPTIONS

--help
   Shows this.

--password=&lt;string&gt;
   Sets a new password used to access the ServerLogic through

--port=&lt;integer&gt;
   Sets a new port for the WebSocket of the ServerLogic.</value>
  </data>
  <data name="StopHelpMessage" xml:space="preserve">
    <value>usage: stop [--help]

DESCRIPTON

Stops the ServerLogic.

OPTIONS

--help
   Shows this.</value>
  </data>
  <data name="VersionHelpMessage" xml:space="preserve">
    <value>usage: version [--help]

DESCRIPTON

Shows the current version of the ServerLogic.

OPTIONS

--help
  Shows this.</value>
  </data>
</root>