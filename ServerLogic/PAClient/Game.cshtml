@page
@model IndexModel
@{
    ViewData["Title"] = "Game";
}

<!--

    --- Spielablauf ---
    ✓ 1) Eine feste Datei für alle keys in "Game.cshtml"
    ✓ 2) Die Datei ist stets für alle sichtbar (wenn man die URL eingibt) und sagt standardmäßig "Please enter a sessionkey on the main page"
    ✓ 3) Die Datei wechselt die Beschreibung, wenn man über die Sessionkey-Eingabe auf dem Mainscreen reinkommt
        ✓ 3.1) Dazu muss man einen valid Sessionkey eingeben, welcher an den Server gesendet wird
        ✓ 3.2) Der Server überprüft ob ein Raum mit dem Key existiert und nimmt dem Nutzer alle SignalR Gruppen ab und teilt ihm den sessionkey als neue Gruppe zu
        ✓ 3.3) Der Client checkt mit dem Server ab ob der Client, Teil einer Gruppe ist, und ändert demensprechend den Standardtext ab zu "Please wait for poll"
    ✓ 4) Der Server schickt an spezifische Gruppen, Nachrichten, welche das HTML/CSS/JS der Seite verändert (Gruppenspezifische Prompts)
        ✓ 4.1) Der Server sendet diese Nachricht nur EIN MAL pro Prompt, weshalb beim neuladen der oder Sonstigem die Seite leer bleibt bis zum nächsten Prompt
    ✓ 5) Die Webseite wird bei den spezifischen Clients geupdated und der Spieler kann eine Auswahl treffen
    ✓ 6) Trifft der Spieler eine Auswahl (oder ist zu langsam [interner Timer auf Serverseite]) wird die Seite "geleert" und entweder die angegebene Lösung angezeigt,
       oder gesagt, dass man zu langsam war.
        ✓ 6.1) Der Server soll überprüfen ob der jeweilige Spieler für die Runde schon eine Antwort gesendet hatte, und dementsprechend keine weiteren Angaben
             mehr zulassen (Cookies? Oder doch Serverseitig per Liste?) => Durch die Tatsache gelöst, dass 4.1) existiert.
    ✓ 7) Der Server wertet die Daten der Gruppe nun aus und sendet diesen an die MSL weiter
    8) Wiederhole 4-7 bis das Spiel zuende ist, woraufhin die Seite entweder geleert wird, oder sonst was


    --- Datenbank ---
    ✓ 1) Immer wenn die ValidSessionKeys Liste geupdated wird, wird diese an das PABackend gesendet (Muss Elias umsetzen, ich kann nur die Schnittstelle bieten)
        ✓ 1.1) Die Daten werden in eine Liste geschrieben.
        ✓ 1.2) Außerdem wird eine Liste von Dictionaries gehalten die alle bisherigen Abstimmungsergebnisse hält.

    --- Wichtige Hürden ---
    ✓ 1) Server läuft seperat auf einem Thread.
    ✓ 2) Push Nachrichten können von außerhalb des Hubs gesendet werden.
    ✓ 3) Dynamisches JS-binding an neu erstellte Objekte
    4) Alle Datenbank-Angelegenheit an das NP anpassen und von strings zu Dictionary<Guid,String> wechseln.
    5) Server umschreiben sodass er mehrere Sessions handeln kann
    6) Game.cshtml löschen
-->

<div id="voting-prompt" name="future-guid" class="voting-prompt text-center">
    Please access this site through the <a asp-page="/Index">Main Page</a> by entering a valid session key.
</div>
<div id="voting-container" class="voting-container">
    <input type="button" id="choice-1" class="input-button voting-container-4items-1" value="3 coins" />
    <input type="button" id="choice-2" class="input-button voting-container-4items-2" value="4 coins" />
    <input type="button" id="choice-3" class="input-button voting-container-4items-3" value="5 coins" />
    <input type="button" id="choice-4" class="input-button voting-container-4items-4" value="6 coins" />
</div>

<div class="container">
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-2">User</div>
        <div class="col-4"><input type="text" id="userInput" /></div>
    </div>
    <div class="row">
        <div class="col-2">Message</div>
        <div class="col-4"><input type="text" id="messageInput" /></div>
    </div>
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-6">
            <input type="button" id="sendButton" value="Send Message" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <hr />
    </div>
</div>
<div class="row">
    <div class="col-6">
        <ul id="messagesList"></ul>
    </div>
</div>
<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
<script src="~/js/rooms.js"></script>

