{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quality Quest Introduction In this project a serious game is to be developed, in which the audience can interactively determine the decisions in the course of the game. At the beginning of the game the audience can choose from several player characters. The subsequent decisions made by voting influence the further course of the game, either by improving skills and thus better chances for random decisions or by the consequences of bad decisions. The goal is to be invited to a prestigious workshop in Hawaii through good work. Motivation The image of the software developer is still strongly influenced by the clich\u00e9 of the nerd living in his parents' basement who does whole projects on his own. However, due to the increasing focus on teamwork, readability and quality assurance, this has practically nothing in common with reality, so the game is intended to show the audience a contemporary picture of software development in a realistic and humorous way. The decisions made in the game are intended to demonstrate the skills required for this profession and show the positive effects of good practices in software development. Vision The game should have an appealing and clear presentation, and the spectators should be able to participate easily via their cell phones. The moderator should be able to continue the game if there are connection problems, and to pause voting if needed. The story should be played through within twenty minutes. Context of project QualityQuest is developed within a software project of the University of Ulm in cooperation with NewTec, represented by Dr. Axel Newe, and shall be published as OpenSource.","title":"Quality Quest"},{"location":"#quality-quest","text":"","title":"Quality Quest"},{"location":"#introduction","text":"In this project a serious game is to be developed, in which the audience can interactively determine the decisions in the course of the game. At the beginning of the game the audience can choose from several player characters. The subsequent decisions made by voting influence the further course of the game, either by improving skills and thus better chances for random decisions or by the consequences of bad decisions. The goal is to be invited to a prestigious workshop in Hawaii through good work.","title":"Introduction"},{"location":"#motivation","text":"The image of the software developer is still strongly influenced by the clich\u00e9 of the nerd living in his parents' basement who does whole projects on his own. However, due to the increasing focus on teamwork, readability and quality assurance, this has practically nothing in common with reality, so the game is intended to show the audience a contemporary picture of software development in a realistic and humorous way. The decisions made in the game are intended to demonstrate the skills required for this profession and show the positive effects of good practices in software development.","title":"Motivation"},{"location":"#vision","text":"The game should have an appealing and clear presentation, and the spectators should be able to participate easily via their cell phones. The moderator should be able to continue the game if there are connection problems, and to pause voting if needed. The story should be played through within twenty minutes.","title":"Vision"},{"location":"#context-of-project","text":"QualityQuest is developed within a software project of the University of Ulm in cooperation with NewTec, represented by Dr. Axel Newe, and shall be published as OpenSource.","title":"Context of project"},{"location":"architectureDiagrams/","text":"Architecture diagrams The diagrams below show the architectural structure of the different components of QualityQuest and how they communicate via well-defined interfaces. Since the architecture is currently still in the concept phase, future changes are very likely. Class diagram The class diagram shows the architectural structure of the individual components of QualityQuest and thus which classes are used in the implementation to logically implement the project. It also shows which interfaces the individual components use to communicate with each other. Since the StoryGraph is run and build locally on the Moderator-Client and the server only has a forwarding and poll evaluation function (possible decisions get forwarded to the audience, polls get evaluated, result of the vote gets forwarded to the Moderator-Client), a fallback is easily possible with only the Moderator as decisionmaker. So if the server is no longer accessible for the Moderator-Client, this will be noticed by the regular status requests and the Moderator will be informed together with the option to switch to Offline-Mode. Since the server only informs the Moderator-Client about the results of the voting, in case of a server failure, only the information about the voting conditions is lost for the Moderator-Client, because the actual decisions are made locally. In Offline-Mode, the timer is deactivated and the Moderator can select decisions directly, while status checks are still performed in the background to inform the Moderator in case the server becomes available again. Component diagrams The class diagrams show the architectural structure of the individual components using interfaces/ports and subsystems. Since the architecture is currently still in the concept phase, future changes are very likely. Component-Overview An overview of all components of QualityQuest and which interfaces exist between the individual components, or the user interfaces of the participants. The physical device Server contains the actual Server component as backend, while the PlayerAudience-Client component corresponds to the frontend. Since there are several instances of the PlayerAudience-Client , the communication between front- and backend is done via an API , which uses the observer-pattern. The exchange between Server and Moderator-Client is realized via a Websocket connection. PlayerAudience-Client The PlayerAudience-Client component consists of a subsystem GUI , which will allow the user to interact via the user interface using HTML and Javascript, and the subsystem Logic , which is responsible for the interpretation of input and the exchange via the API . Server The Server component consists of a subsystem for the Poll Evaluation , which interprets the determined results, and a Logic component. These in turn contain a subsystem Networking , which is responsible for the entire handling of communication via the interfaces Websocket and API . Connected to this is the subsystem Message Management , which prepares the received data for the Poll Evaluation and puts the results into a suitable format for sending. Moderator-Client The component Moderator-Client consists of a subsystem GUI , which, based on Unity, provides a moderator interface for interaction and presentation of the game. The subsystem Logic manages the progress in the game tree, the influence of stats on decisions as well as the communication to the component Server via the Websocket .","title":"Architecture diagrams"},{"location":"architectureDiagrams/#architecture-diagrams","text":"The diagrams below show the architectural structure of the different components of QualityQuest and how they communicate via well-defined interfaces. Since the architecture is currently still in the concept phase, future changes are very likely.","title":"Architecture diagrams"},{"location":"architectureDiagrams/#class-diagram","text":"The class diagram shows the architectural structure of the individual components of QualityQuest and thus which classes are used in the implementation to logically implement the project. It also shows which interfaces the individual components use to communicate with each other. Since the StoryGraph is run and build locally on the Moderator-Client and the server only has a forwarding and poll evaluation function (possible decisions get forwarded to the audience, polls get evaluated, result of the vote gets forwarded to the Moderator-Client), a fallback is easily possible with only the Moderator as decisionmaker. So if the server is no longer accessible for the Moderator-Client, this will be noticed by the regular status requests and the Moderator will be informed together with the option to switch to Offline-Mode. Since the server only informs the Moderator-Client about the results of the voting, in case of a server failure, only the information about the voting conditions is lost for the Moderator-Client, because the actual decisions are made locally. In Offline-Mode, the timer is deactivated and the Moderator can select decisions directly, while status checks are still performed in the background to inform the Moderator in case the server becomes available again.","title":"Class diagram"},{"location":"architectureDiagrams/#component-diagrams","text":"The class diagrams show the architectural structure of the individual components using interfaces/ports and subsystems. Since the architecture is currently still in the concept phase, future changes are very likely.","title":"Component diagrams"},{"location":"architectureDiagrams/#component-overview","text":"An overview of all components of QualityQuest and which interfaces exist between the individual components, or the user interfaces of the participants. The physical device Server contains the actual Server component as backend, while the PlayerAudience-Client component corresponds to the frontend. Since there are several instances of the PlayerAudience-Client , the communication between front- and backend is done via an API , which uses the observer-pattern. The exchange between Server and Moderator-Client is realized via a Websocket connection.","title":"Component-Overview"},{"location":"architectureDiagrams/#playeraudience-client","text":"The PlayerAudience-Client component consists of a subsystem GUI , which will allow the user to interact via the user interface using HTML and Javascript, and the subsystem Logic , which is responsible for the interpretation of input and the exchange via the API .","title":"PlayerAudience-Client"},{"location":"architectureDiagrams/#server","text":"The Server component consists of a subsystem for the Poll Evaluation , which interprets the determined results, and a Logic component. These in turn contain a subsystem Networking , which is responsible for the entire handling of communication via the interfaces Websocket and API . Connected to this is the subsystem Message Management , which prepares the received data for the Poll Evaluation and puts the results into a suitable format for sending.","title":"Server"},{"location":"architectureDiagrams/#moderator-client","text":"The component Moderator-Client consists of a subsystem GUI , which, based on Unity, provides a moderator interface for interaction and presentation of the game. The subsystem Logic manages the progress in the game tree, the influence of stats on decisions as well as the communication to the component Server via the Websocket .","title":"Moderator-Client"},{"location":"changehistory/","text":"Change history The change history is a chronologically ordered list of all changes between different documentation versions. The different versions are listed together with the release date and a link to the changelog of the version. Modification types Type Description + An addition to a document. - A removal from a document. * An alteration of something pre-existing. Examples Type Description + Section that has the change in it: What has been changed: What exactly has been done. - Change History: Example: Removed an example. * Glossary: Moderator-Client: Clarification regarding server backup. Table of contents Version Quick Description Date Link 0.1.0 Architecture design 2020-10-09 Link 0.1.1 Revision of Architecture design 2020-10-27 Link 0.2.0 Component design TBA Link Version 0.2.0 - Component design Type Description */+/- Version 0.1.1 - Revision of Architecture design This is the revised version of the Technical Specifications according to the feedback provided by the customer. Type Description * Glossary: Moderator-Client: Clarification regarding server backup. * Glossary: StoryFlowDecision: Clarification regarding server backup. * Glossary: DiceRandomness: Clarified that the die is six-sided. * Glossary: Voting-Timer: Updated voting time from \"60 seconds\" to \"30 seconds\". * Functional Requirements: Stand-alone game: Moved to non-functional requirements. * Functional Requirements: Game language options: Changed priority from \"-\" to \"0\". * Functional Requirements: Participation of a larger PlayerAudience: Clarification regarding server backup. * Functional Requirements: Character status values: Resolved redundancy with requirement \"Character levelling\". * Functional Requirements: Selecting a character: Concrete selection of characters added. * Functional Requirements: Presentation of character status values: Fixed description and explanation. * Functional Requirements: Character levelling: Resolved redundancy with requirement \"Selecting a character\" and specified levelling up and down. * Functional Requirements: Programming language: Moved to non-functional requirements. * Functional Requirements: Development environment: Moved to non-functional requirements. - Functional Requirements: Usage of game engines: Requirement removed. * Functional Requirements: Usage of online voting solutions: Moved to non-functional requirements. * Functional Requirements: Pause Game: Division into functional requirements \"Pause Game\" and \"PauseButton location\". + Functional Requirements: PauseButton location: Added requirement. - Functional Requirements: Connection Setup: Removed requirement. + Functional Requirements: Amount of supported connections: Added requirement. + Functional Requirements: Exclusive Moderator-Client connection: Added requirement. + Functional Requirements: Moderator game control: Added requirement. * Functional Requirements: Connection Timeout: Clarification regarding communication participants and technical terminology. * Functional Requirements: Server connection loss: Clarification regarding \"system\" being the \"server\". * Functional Requirements: Unique User Identifier (UUID): Specified the UUID. Changed \"participant\" to \"client\". * Functional Requirements: Offline-Mode: Restructured the structure of the requirement. Clarified that the Moderator should \"always\" have the option to continue the game in Offline-Mode. Division into functional requirements \"Offline-Mode\" and \"Offline-Mode transition\". + Functional Requirements: Offline-Mode transition: Added requirement. * Functional Requirements: Game Engine: Moved to non-functional requirements. Resolved redundancy with requirement \"Game Engine\". * Functional Requirements: Communication protocol: Moved to glossary. * Non-functional Requirements: Adherence to Clean Code Principles: Changed priority from \"0\" to \"+\" and updated the description accordingly. * Non-functional Requirements: Type of delivery: Fixed typo in description. Changed \"DOCX\" to \"HTML\". * Requirements: Functional Requirements: Changed Id from \"FA\" to \"FR\". * Requirements: Non-functional Requirements: Changed Id from \"QA\" to \"NFR\". * Component diagrams: Component diagrams: Updated notation and changed inconsistent interface labels. * Component diagrams: Component diagrams: Updated descripitons for all component diagrams. + Used plugins: Live Share: Added used plugin. * Use-case diagrams: Moderator-Client: Division into \"Start Application\", \"Play Game\" and \"End Application\" diagrams. - StoryFlow diagram: StoryFlow diagram: Removed obsolete StoryFlow diagram. Version 0.1.0 - Architecture design This is the initial version of the Technical Specifications and thus has no changelog. The next version, which will focus on the component/detailed design, will be the first version with a changelog.","title":"Change history"},{"location":"changehistory/#change-history","text":"The change history is a chronologically ordered list of all changes between different documentation versions. The different versions are listed together with the release date and a link to the changelog of the version.","title":"Change history"},{"location":"changehistory/#modification-types","text":"Type Description + An addition to a document. - A removal from a document. * An alteration of something pre-existing.","title":"Modification types"},{"location":"changehistory/#examples","text":"Type Description + Section that has the change in it: What has been changed: What exactly has been done. - Change History: Example: Removed an example. * Glossary: Moderator-Client: Clarification regarding server backup.","title":"Examples"},{"location":"changehistory/#table-of-contents","text":"Version Quick Description Date Link 0.1.0 Architecture design 2020-10-09 Link 0.1.1 Revision of Architecture design 2020-10-27 Link 0.2.0 Component design TBA Link","title":"Table of contents"},{"location":"changehistory/#version-020-component-design","text":"Type Description */+/-","title":"Version 0.2.0 - Component design"},{"location":"changehistory/#version-011-revision-of-architecture-design","text":"This is the revised version of the Technical Specifications according to the feedback provided by the customer. Type Description * Glossary: Moderator-Client: Clarification regarding server backup. * Glossary: StoryFlowDecision: Clarification regarding server backup. * Glossary: DiceRandomness: Clarified that the die is six-sided. * Glossary: Voting-Timer: Updated voting time from \"60 seconds\" to \"30 seconds\". * Functional Requirements: Stand-alone game: Moved to non-functional requirements. * Functional Requirements: Game language options: Changed priority from \"-\" to \"0\". * Functional Requirements: Participation of a larger PlayerAudience: Clarification regarding server backup. * Functional Requirements: Character status values: Resolved redundancy with requirement \"Character levelling\". * Functional Requirements: Selecting a character: Concrete selection of characters added. * Functional Requirements: Presentation of character status values: Fixed description and explanation. * Functional Requirements: Character levelling: Resolved redundancy with requirement \"Selecting a character\" and specified levelling up and down. * Functional Requirements: Programming language: Moved to non-functional requirements. * Functional Requirements: Development environment: Moved to non-functional requirements. - Functional Requirements: Usage of game engines: Requirement removed. * Functional Requirements: Usage of online voting solutions: Moved to non-functional requirements. * Functional Requirements: Pause Game: Division into functional requirements \"Pause Game\" and \"PauseButton location\". + Functional Requirements: PauseButton location: Added requirement. - Functional Requirements: Connection Setup: Removed requirement. + Functional Requirements: Amount of supported connections: Added requirement. + Functional Requirements: Exclusive Moderator-Client connection: Added requirement. + Functional Requirements: Moderator game control: Added requirement. * Functional Requirements: Connection Timeout: Clarification regarding communication participants and technical terminology. * Functional Requirements: Server connection loss: Clarification regarding \"system\" being the \"server\". * Functional Requirements: Unique User Identifier (UUID): Specified the UUID. Changed \"participant\" to \"client\". * Functional Requirements: Offline-Mode: Restructured the structure of the requirement. Clarified that the Moderator should \"always\" have the option to continue the game in Offline-Mode. Division into functional requirements \"Offline-Mode\" and \"Offline-Mode transition\". + Functional Requirements: Offline-Mode transition: Added requirement. * Functional Requirements: Game Engine: Moved to non-functional requirements. Resolved redundancy with requirement \"Game Engine\". * Functional Requirements: Communication protocol: Moved to glossary. * Non-functional Requirements: Adherence to Clean Code Principles: Changed priority from \"0\" to \"+\" and updated the description accordingly. * Non-functional Requirements: Type of delivery: Fixed typo in description. Changed \"DOCX\" to \"HTML\". * Requirements: Functional Requirements: Changed Id from \"FA\" to \"FR\". * Requirements: Non-functional Requirements: Changed Id from \"QA\" to \"NFR\". * Component diagrams: Component diagrams: Updated notation and changed inconsistent interface labels. * Component diagrams: Component diagrams: Updated descripitons for all component diagrams. + Used plugins: Live Share: Added used plugin. * Use-case diagrams: Moderator-Client: Division into \"Start Application\", \"Play Game\" and \"End Application\" diagrams. - StoryFlow diagram: StoryFlow diagram: Removed obsolete StoryFlow diagram.","title":"Version 0.1.1 - Revision of Architecture design"},{"location":"changehistory/#version-010-architecture-design","text":"This is the initial version of the Technical Specifications and thus has no changelog. The next version, which will focus on the component/detailed design, will be the first version with a changelog.","title":"Version 0.1.0 - Architecture design"},{"location":"glossary/","text":"Glossary The glossary contains a list of specific terms and their meaning in the context of the project. They can also contain examples, a description of what they are/can be. Actors and roles This section includes all actors involved in the system. Actors are people, but also third party technical systems involved in the system. Term Moderator DESCRIPTION Observe and comment on the game. If the online voting system fails, the moderator can take over the decisions and bring the game to an end. IS-A Human CAN-BE - EXAMPLE - Term PlayerAudience DESCRIPTION Viewers playing the game through StoryFlowDecisions. IS-A Human CAN-BE - EXAMPLE - Term Participants DESCRIPTION A person that participates and interacts with the game in any way. IS-A Human CAN-BE Moderator, PlayerAudience EXAMPLE - Term Customer DESCRIPTION The customer requires that the product meets certain requirements and is the first point of contact for questions and feedback. IS-A Human CAN-BE - EXAMPLE - Term Moderator-Client DESCRIPTION The Moderator-Client offers a graphical interface through which Moderator and PlayerAudience can interact with the game. The Moderator-Client can establish a connection to the server, to include the PlayerAudience in the game, or play the game locally without connecting to a server. In case of a server connection the Moderator-Client visualises and logically implements the output of the server. IS-A Component CAN-BE - EXAMPLE - Term PlayerAudience-Client DESCRIPTION The PlayerAudience-Client provides a graphical interface through which PlayerAudience can interact with the server to participate in polls. The PlayerAudience-Client establishes a direct connection to the server via a web interface. IS-A Component CAN-BE - EXAMPLE - Term Client DESCRIPTION A client serves as a graphical interface through which a participant can interact with the server and the game. IS-A Component CAN-BE Moderator-Client, PlayerAudience-Client EXAMPLE - Term Server DESCRIPTION The server serves as an interface for the communication between the Moderator-Client and the PlayerAudience-Clients. The server contains the Voting-Tool. IS-A Component CAN-BE - EXAMPLE - Term Voting-Tool DESCRIPTION The voting tool is a logical unit, and part of the server, which decides which StoryBranch of the StroyFlow is chosen based on the input of the PlayerAudience-Clients. IS-A - CAN-BE - EXAMPLE - Expertise This section contains a collection of information regarding technical terms that are used in the context of the project. Term StoryFlowDecision DESCRIPTION A special event within the game where the PlayerAudience needs to take a decision which influences the further StoryFlow. After a StoryFlowDecision the PlayerCharacterStatusValues can increase by several levels. The PlayerAudience decides through OnlineVoting. If the server is not available, the moderator decides the StoryFlowDecision. IS-A - CAN-BE - EXAMPLE - Term StoryFlow DESCRIPTION The actual flow of the game-story. The Story contains elements where the PlayerAudience needs to make a StoryFlowDecision and depending on the decision, the StoryFlow progresses in different StoryBranches. IS-A - CAN-BE - EXAMPLE - Term StoryBranch DESCRIPTION A branch of the non-linear StoryFlow of the game. IS-A - CAN-BE - EXAMPLE - Term PlayerCharacterStatusValue DESCRIPTION The PlayerCharacter has different character status values which improve or change during the course of the game. The PlayerCharacterStatusValues are displayed via a PlayerCharacterStatusBox. IS-A - CAN-BE Programming, Analytics, Communication, Partying EXAMPLE - Term Role-playing game DESCRIPTION QualityQuest is a role-playing game. A role-playing game is a game in which players assume the roles of characters in a fictional setting. IS-A - CAN-BE QualityQuest EXAMPLE - Term PlayerCharacterStatusBox DESCRIPTION An info box that displays the different PlayerCharacterStatusValues and the portrait of the PlayerCharacter. The box can be displayed for example in the lower left corner. IS-A - CAN-BE - EXAMPLE - Term PlayerCharacter DESCRIPTION The virtual representation of the PlayerAudience in the game. At the beginning of the game the PlayerAudience chooses a PlayerCharacter from a collection of predefined PlayerCharacters with different PlayerCharacterStatusValues. The PlayerCharacter has different PlayerCharacterStatusValues and a portrait. IS-A - CAN-BE - EXAMPLE - Term Randomness DESCRIPTION The progression in the StoryFlow after a StoryFlowDecision is decided by on of the following randomness options: ZeroRandomness DiceRandomness IS-A - CAN-BE ZeroRandomness, DiceRandomness EXAMPLE - Term ZeroRandomness DESCRIPTION The StoryFlowDecision leads directly to the next StoryBranch. The random element is zero. IS-A Randomness CAN-BE - EXAMPLE - Term DiceRandomness DESCRIPTION After a StoryFlowDecision a six-sided die is rolled, which initiates the further StoryFlow and selects the next StoryBranch. IS-A Randomness CAN-BE - EXAMPLE - Term Programming DESCRIPTION A status value of the PlayerCharacter. Influences how well the character can program, for example less time is needed to program tests. IS-A CharacterStatusValue CAN-BE - EXAMPLE PlayerCharacter James has the programming-skill at 8. Term Analytics DESCRIPTION Determines how well the character can analyze situations and tasks, which increases the chance of success. IS-A CharacterStatusValue CAN-BE - EXAMPLE 4 of 6 DiceRandomness possibilities lead to a positive event, because of high analytic stats. Term Communication DESCRIPTION Communication is a StatusValue of the PlayerCharacter. Communication influences how eloquent the PlayerCharacter is, e.g how well he works in a team or how well he deals with customers. IS-A CharacterStatusValue CAN-BE - EXAMPLE - Term Partying DESCRIPTION A character with a good partying skill can make more contacts at a party more quickly. IS-A CharacterStatusValue CAN-BE - EXAMPLE - Term OnlineVoting DESCRIPTION The PlayerAudience selects its decisions for a StoryFlowDecision via an online voting system. The Connection with the OnlineVoting is established by a QR-Code. IS-A - CAN-BE - EXAMPLE - Term Sidekick-Pet DESCRIPTION Can be unlocked by the PlayerAudience through a StoryFlowDecision. Helps the player in StoryFlowDecisions with helpful tips and suggestions. IS-A - CAN-BE - EXAMPLE - Term Play-Time DESCRIPTION The time it takes to finish a game. The time needed for QualityQuest should be about 15 to 20 minutes. IS-A - CAN-BE - EXAMPLE - Term Voting-Timer DESCRIPTION Timer that is triggered by a StoryFlowDecision. While the timer is running the PlayerAudience has to vote. The moderator can stop the timer with the pause button. IS-A - CAN-BE - EXAMPLE The PlayerAudience has 30 seconds to vote on a StoryFlowDecision. Term Pause-Button DESCRIPTION Button with which the Voting-Timer can be stopped. IS-A - CAN-BE - EXAMPLE - Term Communication protocol DESCRIPTION The communication protocol shall define clearly and well-defined how clients and server shall communicate with each other in order to accept messages. If a client increasingly does not adhere to the communication protocol, a communication protocol violation is detected. IS-A - CAN-BE - EXAMPLE -","title":"Glossary"},{"location":"glossary/#glossary","text":"The glossary contains a list of specific terms and their meaning in the context of the project. They can also contain examples, a description of what they are/can be.","title":"Glossary"},{"location":"glossary/#actors-and-roles","text":"This section includes all actors involved in the system. Actors are people, but also third party technical systems involved in the system. Term Moderator DESCRIPTION Observe and comment on the game. If the online voting system fails, the moderator can take over the decisions and bring the game to an end. IS-A Human CAN-BE - EXAMPLE - Term PlayerAudience DESCRIPTION Viewers playing the game through StoryFlowDecisions. IS-A Human CAN-BE - EXAMPLE - Term Participants DESCRIPTION A person that participates and interacts with the game in any way. IS-A Human CAN-BE Moderator, PlayerAudience EXAMPLE - Term Customer DESCRIPTION The customer requires that the product meets certain requirements and is the first point of contact for questions and feedback. IS-A Human CAN-BE - EXAMPLE - Term Moderator-Client DESCRIPTION The Moderator-Client offers a graphical interface through which Moderator and PlayerAudience can interact with the game. The Moderator-Client can establish a connection to the server, to include the PlayerAudience in the game, or play the game locally without connecting to a server. In case of a server connection the Moderator-Client visualises and logically implements the output of the server. IS-A Component CAN-BE - EXAMPLE - Term PlayerAudience-Client DESCRIPTION The PlayerAudience-Client provides a graphical interface through which PlayerAudience can interact with the server to participate in polls. The PlayerAudience-Client establishes a direct connection to the server via a web interface. IS-A Component CAN-BE - EXAMPLE - Term Client DESCRIPTION A client serves as a graphical interface through which a participant can interact with the server and the game. IS-A Component CAN-BE Moderator-Client, PlayerAudience-Client EXAMPLE - Term Server DESCRIPTION The server serves as an interface for the communication between the Moderator-Client and the PlayerAudience-Clients. The server contains the Voting-Tool. IS-A Component CAN-BE - EXAMPLE - Term Voting-Tool DESCRIPTION The voting tool is a logical unit, and part of the server, which decides which StoryBranch of the StroyFlow is chosen based on the input of the PlayerAudience-Clients. IS-A - CAN-BE - EXAMPLE -","title":"Actors and roles"},{"location":"glossary/#expertise","text":"This section contains a collection of information regarding technical terms that are used in the context of the project. Term StoryFlowDecision DESCRIPTION A special event within the game where the PlayerAudience needs to take a decision which influences the further StoryFlow. After a StoryFlowDecision the PlayerCharacterStatusValues can increase by several levels. The PlayerAudience decides through OnlineVoting. If the server is not available, the moderator decides the StoryFlowDecision. IS-A - CAN-BE - EXAMPLE - Term StoryFlow DESCRIPTION The actual flow of the game-story. The Story contains elements where the PlayerAudience needs to make a StoryFlowDecision and depending on the decision, the StoryFlow progresses in different StoryBranches. IS-A - CAN-BE - EXAMPLE - Term StoryBranch DESCRIPTION A branch of the non-linear StoryFlow of the game. IS-A - CAN-BE - EXAMPLE - Term PlayerCharacterStatusValue DESCRIPTION The PlayerCharacter has different character status values which improve or change during the course of the game. The PlayerCharacterStatusValues are displayed via a PlayerCharacterStatusBox. IS-A - CAN-BE Programming, Analytics, Communication, Partying EXAMPLE - Term Role-playing game DESCRIPTION QualityQuest is a role-playing game. A role-playing game is a game in which players assume the roles of characters in a fictional setting. IS-A - CAN-BE QualityQuest EXAMPLE - Term PlayerCharacterStatusBox DESCRIPTION An info box that displays the different PlayerCharacterStatusValues and the portrait of the PlayerCharacter. The box can be displayed for example in the lower left corner. IS-A - CAN-BE - EXAMPLE - Term PlayerCharacter DESCRIPTION The virtual representation of the PlayerAudience in the game. At the beginning of the game the PlayerAudience chooses a PlayerCharacter from a collection of predefined PlayerCharacters with different PlayerCharacterStatusValues. The PlayerCharacter has different PlayerCharacterStatusValues and a portrait. IS-A - CAN-BE - EXAMPLE - Term Randomness DESCRIPTION The progression in the StoryFlow after a StoryFlowDecision is decided by on of the following randomness options: ZeroRandomness DiceRandomness IS-A - CAN-BE ZeroRandomness, DiceRandomness EXAMPLE - Term ZeroRandomness DESCRIPTION The StoryFlowDecision leads directly to the next StoryBranch. The random element is zero. IS-A Randomness CAN-BE - EXAMPLE - Term DiceRandomness DESCRIPTION After a StoryFlowDecision a six-sided die is rolled, which initiates the further StoryFlow and selects the next StoryBranch. IS-A Randomness CAN-BE - EXAMPLE - Term Programming DESCRIPTION A status value of the PlayerCharacter. Influences how well the character can program, for example less time is needed to program tests. IS-A CharacterStatusValue CAN-BE - EXAMPLE PlayerCharacter James has the programming-skill at 8. Term Analytics DESCRIPTION Determines how well the character can analyze situations and tasks, which increases the chance of success. IS-A CharacterStatusValue CAN-BE - EXAMPLE 4 of 6 DiceRandomness possibilities lead to a positive event, because of high analytic stats. Term Communication DESCRIPTION Communication is a StatusValue of the PlayerCharacter. Communication influences how eloquent the PlayerCharacter is, e.g how well he works in a team or how well he deals with customers. IS-A CharacterStatusValue CAN-BE - EXAMPLE - Term Partying DESCRIPTION A character with a good partying skill can make more contacts at a party more quickly. IS-A CharacterStatusValue CAN-BE - EXAMPLE - Term OnlineVoting DESCRIPTION The PlayerAudience selects its decisions for a StoryFlowDecision via an online voting system. The Connection with the OnlineVoting is established by a QR-Code. IS-A - CAN-BE - EXAMPLE - Term Sidekick-Pet DESCRIPTION Can be unlocked by the PlayerAudience through a StoryFlowDecision. Helps the player in StoryFlowDecisions with helpful tips and suggestions. IS-A - CAN-BE - EXAMPLE - Term Play-Time DESCRIPTION The time it takes to finish a game. The time needed for QualityQuest should be about 15 to 20 minutes. IS-A - CAN-BE - EXAMPLE - Term Voting-Timer DESCRIPTION Timer that is triggered by a StoryFlowDecision. While the timer is running the PlayerAudience has to vote. The moderator can stop the timer with the pause button. IS-A - CAN-BE - EXAMPLE The PlayerAudience has 30 seconds to vote on a StoryFlowDecision. Term Pause-Button DESCRIPTION Button with which the Voting-Timer can be stopped. IS-A - CAN-BE - EXAMPLE - Term Communication protocol DESCRIPTION The communication protocol shall define clearly and well-defined how clients and server shall communicate with each other in order to accept messages. If a client increasingly does not adhere to the communication protocol, a communication protocol violation is detected. IS-A - CAN-BE - EXAMPLE -","title":"Expertise"},{"location":"requirements/","text":"Requirements The requirements are divided into different priorities, whose meaning should be clear from the following table: PRIORITY DESCRIPTION + The requirement must be fulfilled in any case so that the product can be accepted. 0 The fulfillment of the requirement is optional and therefore not necessarily a prerequisite for acceptance, but would have a very positive effect on the product. - The fulfilment of the requirement is also optional and therefore not a prerequisite for the acceptance. Functional requirements This section contains all requirements that specify the basic actions of the software system. REQUIREMENT Game type ID FR1 PRIORITY + DESCRIPTION QualityQuest shall be a 2D RPG. EXPLANATION The PlayerAudience takes over the decision of a character in a fictional world of a software engineer. The PlayerAudience plays the game only through StoryFlowDecisions, for example the game plays like a movie in which the PlayerAudience takes over the decisions of the main character. REQUIREMENT Game presentation ID FR2 PRIORITY + DESCRIPTION QualityQuest shall be a visual-based 2D RPG. EXPLANATION This means that QualityQuest shall not be a purely text-based game, but text may be an element of the visual appearance of the game. REQUIREMENT NewTec branding ID FR3 PRIORITY + DESCRIPTION QualityQuest shall display the NewTec logo clearly visible all the time. EXPLANATION - REQUIREMENT Game language ID FR4 PRIORITY + DESCRIPTION The main language of QualityQuest shall be German. EXPLANATION The majority of in-game language shall be German, but typical software engineering terms that are not German, but are commonly used in Germany do not need to be translated. REQUIREMENT Game language options ID FR5 PRIORITY 0 DESCRIPTION QualityQuest should support multiple languages. EXPLANATION - REQUIREMENT Music ID FR6 PRIORITY - DESCRIPTION QualityQuest may be accompanied by a suitable musical background to enhance the player experience. EXPLANATION - REQUIREMENT Sound effects ID FR7 PRIORITY 0 DESCRIPTION QualityQuest should emphasize important events of the StoryFlow with sound effects. EXPLANATION - REQUIREMENT Game content ID FR8 PRIORITY + DESCRIPTION QualityQuest shall tell a story which mainly consists of typical elements of the software engineering profession. EXPLANATION - REQUIREMENT StoryFlow ID FR9 PRIORITY + DESCRIPTION The story of QualityQuest shall be non-linear. EXPLANATION The story shall contain elements where the PlayerAudience needs to make a StoryFlowDecision. Depending on the decision, the StoryFlow shall continue in different StoryBranches. REQUIREMENT Influence on the StoryFlow by the player ID FR10 PRIORITY + DESCRIPTION The PlayerAudience shall influence the selection of StoryBranches by means of StoryFlowDecisions. EXPLANATION - REQUIREMENT Participation of a larger PlayerAudience ID FR11 PRIORITY + DESCRIPTION QualityQuest shall have the option to let a larger audience participate in StoryFlowDecisions by means of OnlineVoting. EXPLANATION It would be highly desirable that the OnlineVoting feature is directly embedded into the game, together with an offline backup in case the server can't be used. Other methods are acceptable depending on the circumstances. REQUIREMENT Random element of StoryFlow control ID FR12 PRIORITY + DESCRIPTION The selection of a StoryBranch after a StoryFlowDecision shall be generated randomly. EXPLANATION Randomness can be either determined through ZeroRandomness or DiceRandomness. REQUIREMENT Visualizing the randomness ID FR13 PRIORITY + DESCRIPTION If the selection of a StoryBranch after a StoryFlowDecision is generated with DiceRandomness, QualityQuest shall display a clear visualization of the randomizationprocess. EXPLANATION - REQUIREMENT Character status values ID FR14 PRIORITY + DESCRIPTION The PlayerCharacter shall have all of the following status values: Programming, Analytics, Communication, Partying. EXPLANATION - REQUIREMENT Selecting a character ID FR15 PRIORITY + DESCRIPTION At the start of the game the PlayerAudience shall choose a PlayerCharacter from a selection of 4 possible PlayerCharacters via the voting system. EXPLANATION - REQUIREMENT Presentation of character status values ID FR16 PRIORITY + DESCRIPTION QualityQuest shall display a PlayerCharacterStatusBox with all status values at all times. EXPLANATION - REQUIREMENT Portrait of the PlayerCharacter ID FR17 PRIORITY + DESCRIPTION QualityQuest shall display a portrait of the PlayerCharacter as part of the PlayerCharacterStatusBox all the time. EXPLANATION - REQUIREMENT Character levelling ID FR18 PRIORITY + DESCRIPTION The PayerCharacter shall level up and level down its status values based on events or StoryFlowDecisions. EXPLANATION - REQUIREMENT Visual presentation of PlayerCharacter status changes ID FR19 PRIORITY + DESCRIPTION The change of status values of the PlayerCharacter shall be highlighted visually. EXPLANATION - REQUIREMENT Acoustic presentation of PlayerCharacter status changes ID FR20 PRIORITY 0 DESCRIPTION The change of status values of the PlayerCharacter should be highlighted acoustically. EXPLANATION - REQUIREMENT Operating system ID FR21 PRIORITY + DESCRIPTION QualityQuest shall run on Microsoft Windows 10 operating system. EXPLANATION - REQUIREMENT Pause Game ID FR22 PRIORITY + DESCRIPTION The moderator shall have the possibility to pause the game with the PauseButton. EXPLANATION - REQUIREMENT PauseButton location ID FR23 PRIORITY + DESCRIPTION The PauseButton shall be around the lower right edge. EXPLANATION - REQUIREMENT Moderator game control ID FR24 PRIORITY + DESCRIPTION Once the Moderator-Client established the connection to the server, the Moderator shall have the option to start or interrupt the game at any time. EXPLANATION - REQUIREMENT Connection Timeout ID FR25 PRIORITY + DESCRIPTION If the Moderator-Client does not react within 10 seconds after recieving the server's message, the connection from the Moderator-Client to the server shall be interrupted. In this case the Moderator can either continue playing in Offline-Mode or try to re-establish the connection to the server. EXPLANATION This serves as a failsafe, in case of corrupted messages or connection loss. REQUIREMENT Server connection loss ID FR26 PRIORITY + DESCRIPTION If a Moderator-Client or PlayerAudience-Client loses its connection to the server, its Unique User Identifier (UUID) shall be stored in the server. In this case, the respective client can reconnect to the server to participate in the game again. EXPLANATION - REQUIREMENT Data exchange file format ID FR27 PRIORITY + DESCRIPTION The file format for data exchange between clients and server shall be JSON. EXPLANATION - REQUIREMENT Unique User Identifier (UUID) ID FR28 PRIORITY + DESCRIPTION Every client shall be assigned an Unique User Identifier (UUID) in the form of a web-cookie. EXPLANATION This ensures participants can rejoin the game after leaving the game or losing the connection to the server. REQUIREMENT Offline-Mode ID FR29 PRIORITY + DESCRIPTION If any of the following conditions apply: The server is not functional The network infrastructure slows down significantly The connection between clients and server is problematic the Moderator must be given the option to continue the game offline. EXPLANATION - REQUIREMENT Offline-Mode transition ID FR30 PRIORITY + DESCRIPTION The Offline-Mode must ensure a smooth transition between online and offline and shall be able to step in at any time. EXPLANATION - REQUIREMENT Communication protocol violation ID FR31 PRIORITY + DESCRIPTION If a client does not adhere to the communication protocol 3 times, the UUID of the participant should be excluded from the rest of the game. EXPLANATION This ensures that it is not easily possible to tinker with the game through an altered client. Non-functional Requirements This section specifies the non-functional requirements for the software system. REQUIREMENT Documents to be delivered ID NFR1 PRIORITY + DESCRIPTION A System Specification, which comprises use case diagrams, use case descriptions and a static view of the software architecture and Software Design Specification for each software component, which describes both the static and the dynamic view shall be delivered. EXPLANATION - REQUIREMENT In-code documentation style ID NFR2 PRIORITY + DESCRIPTION The source code shall be documented by means of Doxygen and in Javadoc style. EXPLANATION - REQUIREMENT In-code documentation content ID NFR3 PRIORITY + DESCRIPTION All of the following source code elements shall be documented: Constants, variables and defines. Classes and class members. Methods and method signatures, including return values. Functions and function signatures, including return values. EXPLANATION - REQUIREMENT Documentation style for diagrams ID NFR4 PRIORITY + DESCRIPTION All documentation diagrams shall follow the UML standard. EXPLANATION - REQUIREMENT Delivery of UML diagrams ID NFR5 PRIORITY + DESCRIPTION All UML diagrams shall be delivered in the form of a diagram and a PlantUML link. EXPLANATION - REQUIREMENT Adherence to project Coding Styleguide ID NFR6 PRIORITY 0 DESCRIPTION The software code should adhere to the Project Coding Styleguide. EXPLANATION - REQUIREMENT Adherence to Clean Code Principles ID NFR7 PRIORITY + DESCRIPTION The software code shall adhere to Grade 1 (Red) of the Clean Code Principles. EXPLANATION - REQUIREMENT Target PlayerAudience ID NFR8 PRIORITY + DESCRIPTION QualityQuest shall address a target audience of university students with interest in a SW engineering career. EXPLANATION - REQUIREMENT Playing time ID NFR9 PRIORITY + DESCRIPTION The complete story of QualityQuest shall be playable in a time frame of 15 to 20 minutes. EXPLANATION - REQUIREMENT Playing fun ID NFR10 PRIORITY 0 DESCRIPTION The story of QualityQuest should be humorous. EXPLANATION - REQUIREMENT Player motivation ID NFR11 PRIORITY + DESCRIPTION The audience of QualityQuest shall be encouraged to follow the story by motivational elements. EXPLANATION Motivational elements could be for example rewards, achievement & level upgrades. REQUIREMENT Deliverable artefacts ID NFR12 PRIORITY + DESCRIPTION Documentation, Source Code and a running version of QualityQuest shall be delivered to NewTec. EXPLANATION - REQUIREMENT Type of delivery ID NFR13 PRIORITY + DESCRIPTION All deliverable artifacts shall be delivered digitally. EXPLANATION The delivery can be by depositing the deliverable artefacts in a public version control system. Documents should be delivered in both PDF and HTML/CSS. REQUIREMENT Deadline ID NFR14 PRIORITY + DESCRIPTION The deadline for the final delivery is 2021-04-28. EXPLANATION - REQUIREMENT Open source development ID NFR15 PRIORITY - DESCRIPTION The Source Code of QualityQuest may be published open source under CreativeCommons CC BY-NC 4.0 license terms. EXPLANATION - REQUIREMENT Stand-alone game ID NFR16 PRIORITY + DESCRIPTION QualityQuest shall be a stand-alone game. EXPLANATION The final binaries shall include everything that is needed to run the game. Any possibly needed frameworks have to be included in the delivery. The installation of additional frameworks or libraries is not acceptable. REQUIREMENT Programming language ID NFR17 PRIORITY + DESCRIPTION QualityQuest shall be programmed in a C dialect (C, C++ or C#). EXPLANATION - REQUIREMENT Development environment ID NFR18 PRIORITY + DESCRIPTION Both the source code and the build solution of QualityQuest shall be buildable in one of the following development environments: Microsoft Visual Studio, Microsoft Visual Studio Code. EXPLANATION - REQUIREMENT Usage of online voting solutions ID NFR19 PRIORITY - DESCRIPTION An existing online voting solution may be used, if the license conditions of the online voting solution allow the usage of the online voting solution in the context of QualityQuest as intended by NewTec without license fees. EXPLANATION - REQUIREMENT Amount of supported conntecions ID NFR20 PRIORITY + DESCRIPTION The server shall allow up to 200 PlayerAudience-Clients to connect to the game via the network. EXPLANATION - REQUIREMENT Exclusive Moderator-Client connection ID NFR21 PRIORITY + DESCRIPTION The server shall only allow a single Moderator-Client to connect to the server at any given time. EXPLANATION - REQUIREMENT Game Engine ID NFR22 PRIORITY + DESCRIPTION As a game engine the project shall use Unity. EXPLANATION The license conditions of the game engine allow the source code of QualityQuest to be open source. The license conditions of the game engine allow the usage of the game engine without license fees. The license conditions of the game engine allow the usage of QualityQuest as intended by NewTec without license fees.","title":"Requirements"},{"location":"requirements/#requirements","text":"The requirements are divided into different priorities, whose meaning should be clear from the following table: PRIORITY DESCRIPTION + The requirement must be fulfilled in any case so that the product can be accepted. 0 The fulfillment of the requirement is optional and therefore not necessarily a prerequisite for acceptance, but would have a very positive effect on the product. - The fulfilment of the requirement is also optional and therefore not a prerequisite for the acceptance.","title":"Requirements"},{"location":"requirements/#functional-requirements","text":"This section contains all requirements that specify the basic actions of the software system. REQUIREMENT Game type ID FR1 PRIORITY + DESCRIPTION QualityQuest shall be a 2D RPG. EXPLANATION The PlayerAudience takes over the decision of a character in a fictional world of a software engineer. The PlayerAudience plays the game only through StoryFlowDecisions, for example the game plays like a movie in which the PlayerAudience takes over the decisions of the main character. REQUIREMENT Game presentation ID FR2 PRIORITY + DESCRIPTION QualityQuest shall be a visual-based 2D RPG. EXPLANATION This means that QualityQuest shall not be a purely text-based game, but text may be an element of the visual appearance of the game. REQUIREMENT NewTec branding ID FR3 PRIORITY + DESCRIPTION QualityQuest shall display the NewTec logo clearly visible all the time. EXPLANATION - REQUIREMENT Game language ID FR4 PRIORITY + DESCRIPTION The main language of QualityQuest shall be German. EXPLANATION The majority of in-game language shall be German, but typical software engineering terms that are not German, but are commonly used in Germany do not need to be translated. REQUIREMENT Game language options ID FR5 PRIORITY 0 DESCRIPTION QualityQuest should support multiple languages. EXPLANATION - REQUIREMENT Music ID FR6 PRIORITY - DESCRIPTION QualityQuest may be accompanied by a suitable musical background to enhance the player experience. EXPLANATION - REQUIREMENT Sound effects ID FR7 PRIORITY 0 DESCRIPTION QualityQuest should emphasize important events of the StoryFlow with sound effects. EXPLANATION - REQUIREMENT Game content ID FR8 PRIORITY + DESCRIPTION QualityQuest shall tell a story which mainly consists of typical elements of the software engineering profession. EXPLANATION - REQUIREMENT StoryFlow ID FR9 PRIORITY + DESCRIPTION The story of QualityQuest shall be non-linear. EXPLANATION The story shall contain elements where the PlayerAudience needs to make a StoryFlowDecision. Depending on the decision, the StoryFlow shall continue in different StoryBranches. REQUIREMENT Influence on the StoryFlow by the player ID FR10 PRIORITY + DESCRIPTION The PlayerAudience shall influence the selection of StoryBranches by means of StoryFlowDecisions. EXPLANATION - REQUIREMENT Participation of a larger PlayerAudience ID FR11 PRIORITY + DESCRIPTION QualityQuest shall have the option to let a larger audience participate in StoryFlowDecisions by means of OnlineVoting. EXPLANATION It would be highly desirable that the OnlineVoting feature is directly embedded into the game, together with an offline backup in case the server can't be used. Other methods are acceptable depending on the circumstances. REQUIREMENT Random element of StoryFlow control ID FR12 PRIORITY + DESCRIPTION The selection of a StoryBranch after a StoryFlowDecision shall be generated randomly. EXPLANATION Randomness can be either determined through ZeroRandomness or DiceRandomness. REQUIREMENT Visualizing the randomness ID FR13 PRIORITY + DESCRIPTION If the selection of a StoryBranch after a StoryFlowDecision is generated with DiceRandomness, QualityQuest shall display a clear visualization of the randomizationprocess. EXPLANATION - REQUIREMENT Character status values ID FR14 PRIORITY + DESCRIPTION The PlayerCharacter shall have all of the following status values: Programming, Analytics, Communication, Partying. EXPLANATION - REQUIREMENT Selecting a character ID FR15 PRIORITY + DESCRIPTION At the start of the game the PlayerAudience shall choose a PlayerCharacter from a selection of 4 possible PlayerCharacters via the voting system. EXPLANATION - REQUIREMENT Presentation of character status values ID FR16 PRIORITY + DESCRIPTION QualityQuest shall display a PlayerCharacterStatusBox with all status values at all times. EXPLANATION - REQUIREMENT Portrait of the PlayerCharacter ID FR17 PRIORITY + DESCRIPTION QualityQuest shall display a portrait of the PlayerCharacter as part of the PlayerCharacterStatusBox all the time. EXPLANATION - REQUIREMENT Character levelling ID FR18 PRIORITY + DESCRIPTION The PayerCharacter shall level up and level down its status values based on events or StoryFlowDecisions. EXPLANATION - REQUIREMENT Visual presentation of PlayerCharacter status changes ID FR19 PRIORITY + DESCRIPTION The change of status values of the PlayerCharacter shall be highlighted visually. EXPLANATION - REQUIREMENT Acoustic presentation of PlayerCharacter status changes ID FR20 PRIORITY 0 DESCRIPTION The change of status values of the PlayerCharacter should be highlighted acoustically. EXPLANATION - REQUIREMENT Operating system ID FR21 PRIORITY + DESCRIPTION QualityQuest shall run on Microsoft Windows 10 operating system. EXPLANATION - REQUIREMENT Pause Game ID FR22 PRIORITY + DESCRIPTION The moderator shall have the possibility to pause the game with the PauseButton. EXPLANATION - REQUIREMENT PauseButton location ID FR23 PRIORITY + DESCRIPTION The PauseButton shall be around the lower right edge. EXPLANATION - REQUIREMENT Moderator game control ID FR24 PRIORITY + DESCRIPTION Once the Moderator-Client established the connection to the server, the Moderator shall have the option to start or interrupt the game at any time. EXPLANATION - REQUIREMENT Connection Timeout ID FR25 PRIORITY + DESCRIPTION If the Moderator-Client does not react within 10 seconds after recieving the server's message, the connection from the Moderator-Client to the server shall be interrupted. In this case the Moderator can either continue playing in Offline-Mode or try to re-establish the connection to the server. EXPLANATION This serves as a failsafe, in case of corrupted messages or connection loss. REQUIREMENT Server connection loss ID FR26 PRIORITY + DESCRIPTION If a Moderator-Client or PlayerAudience-Client loses its connection to the server, its Unique User Identifier (UUID) shall be stored in the server. In this case, the respective client can reconnect to the server to participate in the game again. EXPLANATION - REQUIREMENT Data exchange file format ID FR27 PRIORITY + DESCRIPTION The file format for data exchange between clients and server shall be JSON. EXPLANATION - REQUIREMENT Unique User Identifier (UUID) ID FR28 PRIORITY + DESCRIPTION Every client shall be assigned an Unique User Identifier (UUID) in the form of a web-cookie. EXPLANATION This ensures participants can rejoin the game after leaving the game or losing the connection to the server. REQUIREMENT Offline-Mode ID FR29 PRIORITY + DESCRIPTION If any of the following conditions apply: The server is not functional The network infrastructure slows down significantly The connection between clients and server is problematic the Moderator must be given the option to continue the game offline. EXPLANATION - REQUIREMENT Offline-Mode transition ID FR30 PRIORITY + DESCRIPTION The Offline-Mode must ensure a smooth transition between online and offline and shall be able to step in at any time. EXPLANATION - REQUIREMENT Communication protocol violation ID FR31 PRIORITY + DESCRIPTION If a client does not adhere to the communication protocol 3 times, the UUID of the participant should be excluded from the rest of the game. EXPLANATION This ensures that it is not easily possible to tinker with the game through an altered client.","title":"Functional requirements"},{"location":"requirements/#non-functional-requirements","text":"This section specifies the non-functional requirements for the software system. REQUIREMENT Documents to be delivered ID NFR1 PRIORITY + DESCRIPTION A System Specification, which comprises use case diagrams, use case descriptions and a static view of the software architecture and Software Design Specification for each software component, which describes both the static and the dynamic view shall be delivered. EXPLANATION - REQUIREMENT In-code documentation style ID NFR2 PRIORITY + DESCRIPTION The source code shall be documented by means of Doxygen and in Javadoc style. EXPLANATION - REQUIREMENT In-code documentation content ID NFR3 PRIORITY + DESCRIPTION All of the following source code elements shall be documented: Constants, variables and defines. Classes and class members. Methods and method signatures, including return values. Functions and function signatures, including return values. EXPLANATION - REQUIREMENT Documentation style for diagrams ID NFR4 PRIORITY + DESCRIPTION All documentation diagrams shall follow the UML standard. EXPLANATION - REQUIREMENT Delivery of UML diagrams ID NFR5 PRIORITY + DESCRIPTION All UML diagrams shall be delivered in the form of a diagram and a PlantUML link. EXPLANATION - REQUIREMENT Adherence to project Coding Styleguide ID NFR6 PRIORITY 0 DESCRIPTION The software code should adhere to the Project Coding Styleguide. EXPLANATION - REQUIREMENT Adherence to Clean Code Principles ID NFR7 PRIORITY + DESCRIPTION The software code shall adhere to Grade 1 (Red) of the Clean Code Principles. EXPLANATION - REQUIREMENT Target PlayerAudience ID NFR8 PRIORITY + DESCRIPTION QualityQuest shall address a target audience of university students with interest in a SW engineering career. EXPLANATION - REQUIREMENT Playing time ID NFR9 PRIORITY + DESCRIPTION The complete story of QualityQuest shall be playable in a time frame of 15 to 20 minutes. EXPLANATION - REQUIREMENT Playing fun ID NFR10 PRIORITY 0 DESCRIPTION The story of QualityQuest should be humorous. EXPLANATION - REQUIREMENT Player motivation ID NFR11 PRIORITY + DESCRIPTION The audience of QualityQuest shall be encouraged to follow the story by motivational elements. EXPLANATION Motivational elements could be for example rewards, achievement & level upgrades. REQUIREMENT Deliverable artefacts ID NFR12 PRIORITY + DESCRIPTION Documentation, Source Code and a running version of QualityQuest shall be delivered to NewTec. EXPLANATION - REQUIREMENT Type of delivery ID NFR13 PRIORITY + DESCRIPTION All deliverable artifacts shall be delivered digitally. EXPLANATION The delivery can be by depositing the deliverable artefacts in a public version control system. Documents should be delivered in both PDF and HTML/CSS. REQUIREMENT Deadline ID NFR14 PRIORITY + DESCRIPTION The deadline for the final delivery is 2021-04-28. EXPLANATION - REQUIREMENT Open source development ID NFR15 PRIORITY - DESCRIPTION The Source Code of QualityQuest may be published open source under CreativeCommons CC BY-NC 4.0 license terms. EXPLANATION - REQUIREMENT Stand-alone game ID NFR16 PRIORITY + DESCRIPTION QualityQuest shall be a stand-alone game. EXPLANATION The final binaries shall include everything that is needed to run the game. Any possibly needed frameworks have to be included in the delivery. The installation of additional frameworks or libraries is not acceptable. REQUIREMENT Programming language ID NFR17 PRIORITY + DESCRIPTION QualityQuest shall be programmed in a C dialect (C, C++ or C#). EXPLANATION - REQUIREMENT Development environment ID NFR18 PRIORITY + DESCRIPTION Both the source code and the build solution of QualityQuest shall be buildable in one of the following development environments: Microsoft Visual Studio, Microsoft Visual Studio Code. EXPLANATION - REQUIREMENT Usage of online voting solutions ID NFR19 PRIORITY - DESCRIPTION An existing online voting solution may be used, if the license conditions of the online voting solution allow the usage of the online voting solution in the context of QualityQuest as intended by NewTec without license fees. EXPLANATION - REQUIREMENT Amount of supported conntecions ID NFR20 PRIORITY + DESCRIPTION The server shall allow up to 200 PlayerAudience-Clients to connect to the game via the network. EXPLANATION - REQUIREMENT Exclusive Moderator-Client connection ID NFR21 PRIORITY + DESCRIPTION The server shall only allow a single Moderator-Client to connect to the server at any given time. EXPLANATION - REQUIREMENT Game Engine ID NFR22 PRIORITY + DESCRIPTION As a game engine the project shall use Unity. EXPLANATION The license conditions of the game engine allow the source code of QualityQuest to be open source. The license conditions of the game engine allow the usage of the game engine without license fees. The license conditions of the game engine allow the usage of QualityQuest as intended by NewTec without license fees.","title":"Non-functional Requirements"},{"location":"storyflow/","text":"StoryFlow diagram A rough overview of the decisions occurring within the story. The diagram exclusively depicts the situations in which decisions can be made and the choices to be made in these situations.","title":"StoryFlow"},{"location":"storyflow/#storyflow-diagram","text":"A rough overview of the decisions occurring within the story. The diagram exclusively depicts the situations in which decisions can be made and the choices to be made in these situations.","title":"StoryFlow diagram"},{"location":"toc/","text":"Table of contents Quality Quest Introduction Motivation Vision Context of project Table of contents Glossary Actors and roles Expertise Requirements Fuctional requirements Non-fuctional requirements Use-Cases PlayerAudience-Client Server Moderator-Client Architecture design Component diagrams Class diagrams StoryFlow Used tools, plugins and libraries Change history","title":"Table of content"},{"location":"toc/#table-of-contents","text":"Quality Quest Introduction Motivation Vision Context of project Table of contents Glossary Actors and roles Expertise Requirements Fuctional requirements Non-fuctional requirements Use-Cases PlayerAudience-Client Server Moderator-Client Architecture design Component diagrams Class diagrams StoryFlow Used tools, plugins and libraries Change history","title":"Table of contents"},{"location":"use-case-diagramme/","text":"Use-case diagrams PlayerAudience-Client Via the PlayerAudience-Client, the individual participant, as part of the audience, has the possibility to vote on the decisions that occur in the game. The PlayerAudience-Client also acts as an actor for the server. Server Server receives the respective decisions from the PlayerAudience-Client, collects and evaluates them in relation to the number of votes. The server also acts as an actor for the Moderator-Client. Moderator-Client Start Application The moderator is responsible for starting the application. From the main menu the moderator can change settings or close the application directly. The moderator can establish a connection to the server to play the game with online polling or the moderator can start the game in Offline-Mode. Play Game If there is a connection to the server, the server is gathering data from the audience and telling the Moderator-Client what is to be done depending on the data collected and the moderator can pause the game. If there is no connection, the moderator plays the game. End Application The moderator is responsible for ending the application. If the application is closed, the session with the server is also terminated.","title":"Use-Cases"},{"location":"use-case-diagramme/#use-case-diagrams","text":"","title":"Use-case diagrams"},{"location":"use-case-diagramme/#playeraudience-client","text":"Via the PlayerAudience-Client, the individual participant, as part of the audience, has the possibility to vote on the decisions that occur in the game. The PlayerAudience-Client also acts as an actor for the server.","title":"PlayerAudience-Client"},{"location":"use-case-diagramme/#server","text":"Server receives the respective decisions from the PlayerAudience-Client, collects and evaluates them in relation to the number of votes. The server also acts as an actor for the Moderator-Client.","title":"Server"},{"location":"use-case-diagramme/#moderator-client","text":"","title":"Moderator-Client"},{"location":"use-case-diagramme/#start-application","text":"The moderator is responsible for starting the application. From the main menu the moderator can change settings or close the application directly. The moderator can establish a connection to the server to play the game with online polling or the moderator can start the game in Offline-Mode.","title":"Start Application"},{"location":"use-case-diagramme/#play-game","text":"If there is a connection to the server, the server is gathering data from the audience and telling the Moderator-Client what is to be done depending on the data collected and the moderator can pause the game. If there is no connection, the moderator plays the game.","title":"Play Game"},{"location":"use-case-diagramme/#end-application","text":"The moderator is responsible for ending the application. If the application is closed, the session with the server is also terminated.","title":"End Application"},{"location":"usedtools/","text":"Used tools, plugins and libraries A list of all tools, plugins and libraries that have been used to create the documentation of the product and helped implementing Quality Quest. The list contains the name of the respective tool, the version that has been used (or a link to the webpage) and a description on how the tool was used. Used tools The following tools were used during the creation of Quality Quest and the documentation: Tool Description Version Visual Studio Code Tool to create and edit markdown files, and also to create and edit PlantUML files. 1.49 PlantUML Used to create the required UML diagrams.. 1.2020.15 GIMP Editor for raster graphics. Was used for image editing. 2.10.18 SourceTree GUI for git. 4.0.1 GitKraken GUI for git. 5.0.4 MkDocs Documentation tool for creating stylised documentation through markdown files. 1.1.2 GitHub Tool for source code management and version control. link Doxygen Tool to generate software reference documentation. 1.8.20 Aseprite Tool to create pixelart sprites and animations. 1.2.25 Planttext A website for converting PlantUML files into svg files. link Docker Tool used to use other tools directly without the need of installing anything, 19.03.13 m2r Markdown to reStructuredText converter used for making the docs usable for Sphinx. link Sphinx Documentation tool for creating stylised documentation through reStructuredText. 3.2.1 Used plugins The following plugins were used during the creation of Quality Quest and the documentation: Plugin Description Version Markdown All in One Virtual Studio Code plugin used for creating MkDocs easier. 3.3.0 PlantUML Virtual Studio Code plugin used for creating PlantUML diagrams directly in VSC and to see the diagram live-update. 2.13.13 mkdocs-with-pdf MkDocs plugin used for creating a PDF out of the MkDocs documents. 0.7.5 Admonition MkDocs extension used to create admonitions in the documentation. link Live Share Visual Studio (Code) plugin used for collaboratively editing any codebase with others in real time. v1.0.3046 Used libraries The following libraries were used during the creation of Quality Quest: Library Description Version","title":"Used tools, plugins and libraries"},{"location":"usedtools/#used-tools-plugins-and-libraries","text":"A list of all tools, plugins and libraries that have been used to create the documentation of the product and helped implementing Quality Quest. The list contains the name of the respective tool, the version that has been used (or a link to the webpage) and a description on how the tool was used.","title":"Used tools, plugins and libraries"},{"location":"usedtools/#used-tools","text":"The following tools were used during the creation of Quality Quest and the documentation: Tool Description Version Visual Studio Code Tool to create and edit markdown files, and also to create and edit PlantUML files. 1.49 PlantUML Used to create the required UML diagrams.. 1.2020.15 GIMP Editor for raster graphics. Was used for image editing. 2.10.18 SourceTree GUI for git. 4.0.1 GitKraken GUI for git. 5.0.4 MkDocs Documentation tool for creating stylised documentation through markdown files. 1.1.2 GitHub Tool for source code management and version control. link Doxygen Tool to generate software reference documentation. 1.8.20 Aseprite Tool to create pixelart sprites and animations. 1.2.25 Planttext A website for converting PlantUML files into svg files. link Docker Tool used to use other tools directly without the need of installing anything, 19.03.13 m2r Markdown to reStructuredText converter used for making the docs usable for Sphinx. link Sphinx Documentation tool for creating stylised documentation through reStructuredText. 3.2.1","title":"Used tools"},{"location":"usedtools/#used-plugins","text":"The following plugins were used during the creation of Quality Quest and the documentation: Plugin Description Version Markdown All in One Virtual Studio Code plugin used for creating MkDocs easier. 3.3.0 PlantUML Virtual Studio Code plugin used for creating PlantUML diagrams directly in VSC and to see the diagram live-update. 2.13.13 mkdocs-with-pdf MkDocs plugin used for creating a PDF out of the MkDocs documents. 0.7.5 Admonition MkDocs extension used to create admonitions in the documentation. link Live Share Visual Studio (Code) plugin used for collaboratively editing any codebase with others in real time. v1.0.3046","title":"Used plugins"},{"location":"usedtools/#used-libraries","text":"The following libraries were used during the creation of Quality Quest: Library Description Version","title":"Used libraries"}]}