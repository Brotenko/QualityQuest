@startuml

skinparam classAttributeIconSize 0

package "Moderator-Client" {

  class StoryEvent {
    {field} +eventId: int
    {field} +description: string
    {field} +parent: StoryEvent
    {field} +children: StoryEvent[]
    {method} +StoryEvent(parent: StoryEvent, id: int)
    {method} +addChild(): void
  }

  class StoryGraph {
    {field} +character: Character
    {field} +root: StoryEvent
    {field} +currentEvent: StoryEvent
    {method} +StoryGraph(id: int)
    {method} +loadGraphFromFile(): Graph
    {method} +saveGraphToFile(): void
    {method} +getNextPossibleEvent(): StoryEvent[]
    {method} +setCurrentEvent(newCurrentEvent: StoryEvent): void
    {method} +getNextStoryEventById(id: int): StoryEvent
  }

  class "ModeratorView" as mf {
    {method} +ModeratorView()
    {method} +pausePolling(val: boolean): void
    {method} +offlineMode(val: boolean): void
  }

  class "ModeratorClientExchange" as mcei{
    {field} -websocket: WebSocket
    {field} -authentificationGuid: Guid
    {field} -timeoutDuration: int
    {method} +ModeratorClientExchange()
    {method} +sendMessage(message: string): void
    {method} +evalJSON(): string
    {method} +endCurrentPollAndGetVotingResults(): int
    {method} +makeJSON(): string
    {method} +enterPassword(pw: string): void
  }

  class Skills {
    {field} +communication: int
    {field} +analytics: int
    {field} +partying: int
    {field} +programming: int
    {method} + Skill(commu: int, analy: int, party: int, progr: int)
  }

  class Character {
    {field} +abilities: Skills
    {field} +name: string
    {method} +Character()
  }
  
  StoryEvent "n" --* "1" StoryGraph
  StoryGraph -- mf
  StoryGraph -- Character
  Character -- Skills
  mf -- mcei
  StoryGraph --- mcei
}

package "ServerApplication" {
   class "API" as api {
        {field} -observerCollection: ArrayList<Observer>
        {method} +API()
        {method} +subscribeObserver(observer: Observer, cookie: Cookie): void
        {method} +unsubscribeObserver(observer: Observer): void
        {method} +notifyObservers(): void
        {method} +updatePossibleDecisions(): void
        {method} +collectVotes(): void
        {method} +getVotes(): 
  }

  package "ServerLogic" <<Rectangle>>{
    class "ServerShell" as ss {
      {field} +logger: Logger
      {field} -port: int
      {field} -runShell: boolean
      {field} -serverShell: ServerShell
      {field} -bufferedReader: BufferedReader
      {method} +ServerShell()
      {method} +startShell(): void
      {method} +stopShell(): void
      {method} +parseCommand(command: string): void
      {method} +showHelp(): void
      {method} +configPort(): void
      {method} +configCapacity(): void
      {method} +startServer(): void
      {method} +stopServer(): void
      {method} +main(args: string[]): void
    }

    class "ModeratorClientManager" as cm {
      {field} -webSocket: WebSocket
      {field} -ip: int
      {field} -port: int
      {field} +logger: Logger
      {field} -authentificationTokenModeratorClientHash: int
      {method} +ModeratorClientManager(session: Session): void
      {method} +disconnect(): void
      {method} +recieveMessage(message: string): void
      {method} +checkJSON(message: string): void
      {method} +sendMessage(message: string): void
      {method} +evalJSON(): string

    }    

    class "MainServerLogic" as msl {
      {field} -moderator: WebClient
      {field} +logger: Logger
      {method} +MainServerLogic(capacity: int, port: int)
      {method} +onFalseMessage(message: string): void
      {method} +onVotingMessage(message: string): void

    }

    class "PollEvaluator" as pe {
    {field}- possibleDecisions: StoryEvent[]
    {field} -voteCounter: Dictionary<int,int>
    {field} -api: API
    {method} +PollEvaluator()
    {method} +evaluateVotes(ids: int[]): int
    {method} +addVote(id: int): void
  }

    class "ServerLogger" as sl {
      {field} +globalLogger: Logger
      {field} +logFile: FileHandler
      {field} +isSetup: Boolean
      {field} +consoleHandler: Handler
      {method} +Logger()
      {method} +setup(): void
      {method} +addHandler(logger: Logger): void
      {method} +setLevel(level: int): void
      {method} +setConsoleOutput(val: boolean): void
    }
  }
  package "PlayerAudience-Client" <<Rectangle>>{  
    class "PlayerAudienceClientExchange" as pace <<Observer>>{
      {field} -sessionCookie: Cookie
      {field} -hasVoted: boolean
      {field} -selectedDecision: StoryEvent
      {field} -possibleDecisions: StoryEvent[]
      {method} +PlayerAudienceClientExchange()
      {method} +update(): void
      {method} +sendSelectedDecision(): StoryEvent 
    }

    class "PlayerAudienceView" as pav {
      {method} +PlayerAudienceView()
    }
  }
  ss -- msl
  msl - cm
  msl -left- pe
  pe -left- api
  sl ... cm
  sl ... msl
  sl ... api
  sl ... ss
  pace - pav
  api "1" <-up- "n" pace : observes
}

mcei -right- cm

@enduml