@startuml

skinparam classAttributeIconSize 0

package "Moderator-Client" {

  class StoryEvent {
    {field} +eventId: int
    {field} +description: string
    {field} +parent: StoryEvent
    {field} +children: StoryEvent[]
    {method} +StoryEvent(parent: StoryEvent, id: int)
    {method} +addChild(): void
  }

  class StoryGraph {
    {field} +id: int
    {field} +character: Character
    {field} +root: StoryEvent
    {field} +currentEvent: StoryEvent
    {method} +StoryGraph(id: int)
    {method} +loadGraphFromFile(): Graph
    {method} +saveGraphToFile(): void
    {method} +getNextPossibleEvent(): StoryEvent[]
    {method} +setCurrentEvent(newCurrentEvent: StoryEvent): void
    {method} +getNextStoryEventById(id: int): StoryEvent
  }

  class "ModeratorView" as mf {
    {field} +timeoutDuration: int
    {method} +ModeratorView()
    {method} +pausePolling(val: boolean): void
    {method} +offlineMode(val: boolean): void
  }

  class "ModeratorClientExchange" as mcei{
    {field} +websocket: WebSocket
    {field} +authentificationTokenModeratorClient: Token
    {method} +ModeratorClientExchange()
    {method} +getCurrentPollEval(): int
    {method} +makeJSON(): string
  }

  class Skill {
    {field} +id: int
    {field} +value: int
    {field} +description: string
    {method} + Skill(id: int, val: int, desc: string)
    {method} + setValue(val: int): void
    {method} + getValue(): int
  }

  class Character {
    {field} +sprite: Texture
    {field} +abilities: Skill[]
    {field} +name: string
    {method} +Character()
  }
  
  StoryEvent "n" --* "1" StoryGraph
  StoryGraph -- mf
  StoryGraph -- Character
  Character "1" *-- "n" Skill
  mf -- mcei
}

@enduml