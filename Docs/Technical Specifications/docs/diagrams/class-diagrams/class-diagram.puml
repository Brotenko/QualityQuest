@startuml

skinparam classAttributeIconSize 0

package "Moderator-Client" {

  class StoryEvent {
    {field} -eventId: int
    {field} -description: string
    {field} -parent: StoryEvent
    {field} -children: StoryEvent[]
    {method} +StoryEvent(parent: StoryEvent, id: int)
    {method} +AddChild(): void
  }

  class StoryGraph {
    {field} -character: Character
    {field} -root: StoryEvent
    {field} -currentEvent: StoryEvent
    {method} +StoryGraph(id: int)
    {method} +LoadGraphFromFile(filepath: string): Graph
    {method} +SaveGraphToFile(filepath: string): void
    {method} +GetNextPossibleEvent(): StoryEvent[]
    {method} +SetCurrentEvent(newCurrentEvent: StoryEvent): void
    {method} +GetNextStoryEventById(id: int): StoryEvent
  }

  class "ModeratorView" as mf {
    {field} -startedOnline: bool
    {method} +ModeratorView()
    {method} +PausePolling(val: bool): void
    {method} +OfflineMode(val: bool): void
  }

  class "ModeratorClientExchange" as mcei{
    {field} -webSocket: WebSocket
    {field} -authentificationGuid: Guid
    {field} -timeoutDuration: int
    {method} +ModeratorClientExchange()
    {method} +SendMessage(message: string): void
    {method} +EvalJSON(json: string): bool
    {method} +GetVotingResults(): int
    {method} +MakeJSON(): string
    {method} +EnterPassword(pw: string): void
  }

  class Skills {
    {field} -communication: int
    {field} -analytics: int
    {field} -partying: int
    {field} -programming: int
    {method} + Skills(commu: int, analy: int, party: int, progr: int)
    {method} + UpdateCommunicationSkill(value: int): void
    {method} + UpdateAnalyticsSkill(value: int): void
    {method} + UpdatePartyingSkill(value: int): void
    {method} + UpdateProgrammingSkill(value: int): void
  }

  class Character {
    {field} -abilities: Skills
    {field} -name: string
    {method} +Character()
  }
  
  StoryEvent "n" --* "1" StoryGraph
  StoryGraph -- mf
  StoryGraph -- Character
  Character -- Skills
  mf -- mcei
  StoryGraph --- mcei
}

package "Server" {
   

  package "ServerLogic" <<Rectangle>>{
    class "ServerShell" as ss {
      {field} +logger: Logger
      {field} -_port: int
      {field} -_password: string
      {field} -serverShell: ServerShell
      {field} -serverIsRunning: bool
      {field} -commandRequestsHelpMessage: bool
      {method} +ServerShell()
      {method} -RunShell(): void
      {method} -StopShell(): void
      {method} +ParseCommandDebugger(command: string): string
      {method} -ParseCommand(input: string): string
      {method} -ParsePort(paramterList: string[]): string
      {method} -ParsePassword(paramterList: string[]): string
      {method} -StartServer(parameterList): string
      {method} -StopServer(): string
      {method} -ShowHelp(command: string): string
      {method} -ShowVersion(): string
      {method} -ClearLogs(): string
      {static} -CheckMainMethodArgs(args: string[]): string[]
      {static} -ValidateShellPassword(password: string): string
      {static} -ValidateShellPort(portString: string): int
      {static} +Main(args: string[])
    }

    class "MessageContainer" as messCont {
      {field} +ModeratorID: Guid
      {field} +Type: MessageType
      {field} +CreationDate: DateTime
      {field} +DebugMessage: string
      {method} +MessageContainer(moderatorId: Guid, type: MessageType, creationDate: DateTime, debugMessage: string): void
      {method} +MessageContainer(moderatorId: Guid, type: MessageType, debugMessage: string): void
      {method} +MessageContainer(moderatorId: Guid, type: MessageType): void
      {method} +ToString(): string
    }

    class "AudienceStatusMessage" as audStatMess {
      {field} +AudienceCount: int
      {method} +AudienceStatusMessage(moderatorId: Guid, audienceCount: int)
      {method} +AudienceStatusMessage(moderatorId: Guid, audienceCount: int, debugMessage: string)
      {method} +ToString(): string
    }

    class "ErrorMessage" as errMess{
      {field} +ErrorMessageType: ErrorType
      {field} +ErrorMessageText: string
      {method} +ErrorMessage(moderatorId: Guid, errorMessageType: ErrorType, errorMessageText: string)
      {method} +ErrorMessage(moderatorId: Guid, errorMessageType: ErrorType, errorMessageText: string, debugMessage: string)
      {method} +ToString(): string
    }

    skinparam enum{
      BackgroundColor Wheat
      BorderColor Wheat
    }

    enum "ErrorType" as errorType {
      ..
      WrongPassword
      UnknownGuid
      IllegalPauseAction
      SessionDoesNotExist
      NewModerator
      IllegalMessage
    }

    enum "MessageType" as messType{
      ..
      RequestOpenSession
      SessionOpened
      AudienceStatus
      RequestServerStatus
      Reconnect
      ReconnectSuccessful
      RequestGameStart
      GameStarted
      RequestStartVoting
      VotingStarted
      VotingEnded
      ErrorType
      RequestGamePausedStatusChange
      GamePausedStatus
      RequestCloseSession
      SessionClosed
    }


    class "ModeratorClientManager" as cm {
      {field} -webSocket: WebSocket
      {field} -ip: IPAddress
      {field} -port: int
      {field} -numberOfConnectedPlayerAudienceClients: int
      {field} +logger: Logger
      {field} -authentificationTokenModeratorClientHash: int
      {method} +ModeratorClientManager(): void
      {method} +Disconnect(): void
      {method} +RecieveMessage(message: string): void
      {method} +CheckJSON(message: string): bool
      {method} +SendMessage(message: string): void
      {method} +SendVotingResults(results: Dictionary<Guid, int>): void
      {method} +EvalJSON(json: string): string[]

    }    

    class "MainServerLogic" as msl {
      {field} -moderator: ModeratorClientManager
      {field} -playerAudience: PlayerAudienceClientManager
      {field} -timer: Timer
      {field} +logger: Logger
      {method} +MainServerLogic(capacity: int, port: int)
      {method} +OnFalseMessage(message: string): void
      {method} +OnVotingMessage(message: string): void
      {method} +UpdateModeratorClientManagerPlayerAudienceClientCountAttribute(): void
      {method} +StartPollingTimer(): void
    }

    class "PlayerAudienceClientManager" as api {
        {field} -observerCollection: ArrayList<Observer>
        {field} -possibleDecisions: string[]
        {field} -voteCounter: Dictionary<int, int>
        {method} +PlayerAudienceClientManager()
        {method} +SubscribeObserver(observer: Observer, cookie: Cookie): void
        {method} +UnsubscribeObserver(observer: Observer): void
        {method} -NotifyObservers(): void
        {method} +UpdatePossibleDecisions(decisions: Dictionary<Guid, string>): void
        {method} +EvaluateVotes(): Dictionary<Guid, int>
  }

    class "ServerLogger" as sl <<Singleton>> {
      {field} +globalLogger: Logger
      {field} -logFile: StreamWriter
      {field} -isSetup: bool
      {field} -consoleHandler: Handler
      {method} -Logger()
      {method} +CreateNewLogger(): Logger
      {method} +Setup(): void
      {method} +AddHandler(logger: Logger): void
      {method} +SetLevel(level: int): void
      {method} +SetConsoleOutput(val: bool): void
    }
  }
  package "PlayerAudience-Client" <<Rectangle>>{  
    class "PlayerAudienceClientExchange" as pace <<Observer>>{
      {field} -sessionCookie: Cookie
      {field} -votingAllowed: bool
      {field} -selectedDecision: int
      {field} -possibleDecisions: Dictionary<Guid, string>
      {method} +PlayerAudienceClientExchange()
      {method} +Update(): void
      {method} -HashifyStringToID(decision: string): int
    }

    class "PlayerAudienceView" as pav {
      {method} +PlayerAudienceView()
    }
  }
  ss -- msl
  msl - cm
  msl -down- api
  sl ... cm
  sl ... msl
  sl ... api
  sl ... ss
  pace -left- pav
  api "1" <-right- "n" pace : observes
  messCont <|- audStatMess
  errMess - errorType
}

mcei -right- cm

@enduml