@startuml

skinparam classAttributeIconSize 0

package "ServerLogic" {
   
    package "Model" <<Rectangle>>{
    class "MessageContainer" as messCont {
      {field} <<Property>> +ModeratorID: Guid <<+get>>
      {field} <<Property>> +Type: MessageType <<+get>>
      {field} <<Property>> +CreationDate: DateTime <<+get>>
      {method} +MessageContainer(moderatorId: Guid, type: MessageType)
      {method} +ToString(): string
    }

    class "AudienceStatusMessage" as audStatMess {
      {field} <<Property>> +AudienceCount: int <<+get>>
      {method} +AudienceStatusMessage(moderatorId: Guid, audienceCount: int)
      {method} +ToString(): string
    }

    class "ErrorMessage" as errMess{
      {field} <<Property>> +ErrorMessageType: ErrorType <<+get>>
      {field} <<Property>> +ErrorMessageText: string <<+get>>
      {method} +ErrorMessage(moderatorId: Guid, errorMessageType: ErrorType, errorMessageText: string)
      {method} +ToString(): string
    }

    class "GamePausedStatusMessage" as gaPaStatMess{
      {field} <<Property>> +GamePaused: bool <<+get>>
      {method} +GamePausedStatusMessage(moderatorId: Guid, gamePaused: bool)
      {method} +ToString(): string
    }

    class "GameStartedMessage" as gaStartMess{
      {method} +GameStartedMessage(moderatorId: Guid)
      {method} +ToString(): string
    }

    class "ReconnectMessage" as reconnMess{
      {method} +ReconnectMessage(moderatorId: Guid)
      {method} +ToString(): string
    }

    class "RecconnectSuccessfulMessage" as reconnSuccMess{
      {method} +ReconnectSuccessfulMessage(moderatorId: Guid)
      {method} +ToString(): string
    }

    class "RequestCloseSessionMessage" as reqCloseSessMess{
      {field} <<Property>> +SessionKey: string <<+get>>
      {method} +RequestCloseSessionMessage(moderatorId: Guid, sessionKey: string)
      {method} +ToString(): string
    }

    class "RequestGamePausedStatusChangeMessage" as reqGaPaStatMess{
      {field} <<Property>> +GamePaused: bool <<+get>>
      {method} +RequestGamePausedStatusChangeMessage(moderatorId: Guid, gamePaused: bool)
      {method} +ToString(): string
    }

    class "RequestGameStartMessage" as reqGaStartMess{
      {method} +RequestGameStartedMessage(moderatorId: Guid)
      {method} +ToString(): string
    }

    class "RequestOpenSessionMessage" as reqOpSessMess{
      {field} <<Property>> +Password: string <<+get>>
      {method} +RequestOpenSessionMessage(moderatorId: Guid, password: string)
      {method} +ToString(): string
    }

    class "RequestServerStatusMessage" as reqServStatMess{
      {method} +RequestServerStatusMessage(moderatorId: Guid)
      {method} +ToString(): string
    }

    class "RequestStartVotingMessage" as reqStartVotMess{
      {field} <<Property>> +VotingTime: int <<+get>>
      {field} <<Property>> +VotingPrompt: KeyValuePair<Guid, string> <<+get>>
      {field} <<Property>> +VotingOptions: KeyValuePair<Guid, string>[] <<+get>>
      {method} +RequestStartVotingMessage(moderatorId: Guid, votingTime: int, votingPrompt: KeyValuePair<Guid, string>, votingOptions: KeyValuePair<Guid, string>[])
      {method} +ToString(): string
    }

    class "ServerStatusMessage" as servStatMess{
      {method} +ServerStatusMessage(moderatorId: Guid)
      {method} +ToString(): string
    }

    class "SessionClosedMessage" as sessClosedMess{
      {method} +SessionClosedMessage(moderatorId: Guid)
      {method} +ToString(): string
    }

    class "SessionOpenedMessage" as sessOpMess{
      {field} <<Property>> +SessionKey: string <<+get>>
      {field} <<Property>> +DirectURL: Uri <<+get>>
      {method} +SessionOpenedMessage(moderatorId: Guid, sessionKey: string, directURL: Uri)
      {method} +ToString(): string
    }

    class "VotingEndedMessage" as votEndMess{
      {field} <<Property>> +WinningOption: string <<+get>>
      {field} <<Property>> +VotingResults: Dictionary<Guid, int> <<+get>>
      {field} +TotalVotes: int
      {method} +VotingEndedMessage(moderatorId: Guid, winningOption: Guid, votingResults: Dictionary<Guid, int>)
      {method} +ToString(): string
    }

    class "VotingStartedMessage" as votStartMess{
      {method} +VotingStartedMessage(moderator: Guid)
      {method} +ToString(): string
    }

    skinparam enum{
      BackgroundColor Wheat
      BorderColor Wheat
    }

    enum "ErrorType" as errorType {
      ..
      WrongPassword
      UnknownGuid
      IllegalPauseAction
      WrongSession
      GuidAlreadyExists
      IllegalMessage
    }

    enum "MessageType" as messType{
      ..
      RequestOpenSession
      SessionOpened
      AudienceStatus
      Reconnect
      ReconnectSuccessful
      RequestGameStart
      GameStarted
      RequestStartVoting
      VotingStarted
      VotingEnded
      ErrorType
      RequestGamePausedStatusChange
      GamePausedStatus
      RequestCloseSession
      SessionClosed
    }
  }


  package "Control" <<Rectangle>>{
    class "ServerShell" as ss {
      {field} -_serverIsRunning: bool
      {field} -_commandRequestsHelpMessage: bool
      {field} -_mainServerLogic: MainServerLogic
      {static} -_isDebug: bool 
      {method} +ServerShell(password: string, port: int)
      {method} +ParseCommandDebugger(debugInput: string): string
      {method} -CheckPasswordConditions(password: string): string
      {method} -SetPasswordDialog(): void
      {method} -RunShell(): void
      {method} -DebugServerShell(): ServerShell
      {method} -StopShell(): void
      {method} -ParseCommand(input: string): string
      {method} -ParsePort(parameterList: string[]): string
      {method} -ParsePassword(parameterList: string[]): string
      {method} -StartServer(parameterList: string[]): string
      {method} -StopServer(): string
      {method} -ShowHelp(command: string): string
      {method} -ShowVersion(): string
      {method} -ShowLogs(parameterList: string[]): string 
      {static} +Main(args: string[])
      {static} +StringToSHA256Hash(hashMe: string):string
      {static} -CheckMainMethodArgs(args: string[]): string[]
      {static} -ValidateShellPassword(password: string): string
      {static} -ValidateShellPort(portString: string): int
      {static} -SaltGen(): string
    }

    class "ModeratorClientManager" as cm {
      {field} +ModeratorGuid: Guid
      {field} +SessionKey: string
      {field} +Strikes: int
      {field} +IsVoting: bool
      {field} +IsPaused: bool
      {field} +IsInactive: bool
      {field} +SocketConnection: IWebSocketConnection
      {field} -_playerAudienceCountLiveUpdateTimer: Timer
      {field} -_votingTimer: Timer
      {field} -_votingStarted: DateTime
      {field} -_currentPrompt: KeyValuePair<Guid, string>
      {field} -_inactivityTimer: Timer
      {field} -_playerAudienceClientAPI: PlayerAudienceClientAPI
      {method} +ModeratorClientManager(moderatorGuid: Guid, socketConnection: IWebSocketConnection, playerAudienceClientApi: PlayerAudienceClientAPI): void
      {method} +InitSession(sessionKey: string): void
      {method} +ResetInactivity(): void
      {method} +StartVotingTimer(startVoting: RequestStartVotingMessage): void
      {method} +PauseVotingTimer(pause: bool): bool
      {method} +StartAudienceCountLiveUpdate(): void
      {method} +Stop(closeSocket: bool): void
      {method} +StopAudienceCountLiveUpdate(): void
      {method} +StopInactivityTimer(): void
      {method} -SetToInactive(source: object, eventArgs: ElapsedEventArgs): void
      {method} -SendAudienceCount(source: object, eventArgs: ElapsedEventArgs): void
      {method} -SendVotingResults(source: object, eventArgs: ElapsedEventArgs): void
    }    

    class "MainServerLogic" as msl {
      {field} +ActiveConnections: string
      {field} #_playerAudienceClientApi: PlayerAudienceClientAPI
      {field} #_connectedModeratorClients: Dictionary<Guid, ModeratorClientManager>
      {field} -_server: WebSocketServer
      {field} -MaxRepForRandomGeneration: int
      {field} -_checkForInactiveSessionsTimer: Timer
      {method} +MainServerLogic(): void
      {method} +Start(): void
      {method} +Stop(): void
      {method} #StartWebSocket(): void
      {method} #CheckStringMessage(message: string): string
      {method} #AddStrike(moderatorId: Guid): void
      {method} #GenerateSessionKey(maxRecursionCycles: int): string
      {method} -CheckForSessionInactivity(source: object, eventArgs: ElapsedEventArgs): void 
    }

    class "PlayerAudienceClientAPI" as api {
        {field} -_pABackend: PABackend
        <<Property>> +ServerIsActive: bool <<+get,-set>>
        {method} +StartServer(port: int): void
        {method} +DebugStartServer(port: int): void
        {method} +StartNewSession(sessionkey: string): void
        {method} +StartNewVote(sessionkey: string, prompt: KeyValuePair<Guid, string>, options: KeyValuePair<Guid, string>[]): Task
        {method} +GetVotingResult(sessionkey: string, prompt: KeyValuePair<Guid, string>): Dictionary<KeyValuePair<Guid, string>, int>
        {method} +EndSession(sessionkey: string): Dictionary<KeyValuePair<Guid, string>, Dictionary<KeyValuePair<Guid, string>, int>>
        {method} +StopServer(): void
    }

    class "ServerLogger" as sl <<Singleton>> {
      {static} -ServerLogger: _serverLogger
      {method} -ServerLogger(): void
      {static} +CreateServerLogger(): void
      {static} +SetLogLevel(level: int): void
      {static} +LogFileToString(): string
      {static} +WipeLogFile(): void
      {static} +ChangeLoggingOutputType(val: int): void
      {static} +LogDebug(record: string): void
      {static} +LogInformation(record: string): void
      {static} +LogWarning(record: string): void
      {static} +LogError(record: string): void
      {static} -WriteLog(logMessage: string): void
    }
  }
  
  ss -- msl
  api - cm
  msl - cm
  msl -down- api
  sl ... cm
  sl ... msl
  sl ... api
  sl ... ss
  api -- PABackend
  msl -- messCont
  cm -- messCont
  messCont <|- audStatMess
  messCont <|- gaPaStatMess
  messCont <|- gaStartMess
  messCont <|- reconnMess
  messCont <|- reconnSuccMess
  messCont <|- reqCloseSessMess
  messCont <|- reqGaPaStatMess
  messCont <|- reqGaStartMess
  messCont <|- reqOpSessMess
  messCont <|- reqServStatMess
  messCont <|- reqStartVotMess
  messCont <|- servStatMess
  messCont <|- sessClosedMess
  messCont <|- sessOpMess
  messCont <|- votEndMess
  messCont <|- votStartMess
  messCont <|-down- errMess
  messCont -left- messType
  errMess -down- errorType

  votStartMess -[hidden]- votEndMess
  votEndMess -[hidden]- sessOpMess
  sessOpMess -[hidden]- sessClosedMess
  sessClosedMess -[hidden]- reqGaPaStatMess
  reqCloseSessMess -[hidden]- reconnSuccMess
  reconnSuccMess -[hidden]- reconnMess
  servStatMess -[hidden]- reqStartVotMess
  reqStartVotMess -[hidden]-reqServStatMess
  reqServStatMess -[hidden]- gaStartMess
  gaStartMess -[hidden]-gaPaStatMess
  reconnMess -[hidden]- audStatMess
  reqStartVotMess -[hidden]- servStatMess
  servStatMess -[hidden]- votStartMess
  votStartMess -[hidden]-reqCloseSessMess

  
}

@enduml
