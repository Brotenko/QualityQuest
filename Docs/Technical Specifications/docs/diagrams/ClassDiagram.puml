@startuml

skinparam classAttributeIconSize 0

package "Moderator Client" {

  class StoryEvent {
    {field} +eventId: int
    {field} +description: String
    {field} +parent: StoryEvent
    {field} +children: StoryEvent[]
    {method} +StoryEvent(parent: StoryEvent, id: int)
    {method} +addChild(): void
  }

  class StoryGraph {
    {field} +id: int
    {field} +character: Character
    {field} +root: StoryEvent
    {field} +currentEvent: StoryEvent
    {method} +StoryGraph(id: int)
    {method} +loadGraphFromFile(): Graph
    {method} +saveGraphToFile(): void
    {method} +getNextPossibleEvent(): StoryEvent[]
    {method} +setCurrentEvent(newCurrentEvent: StoryEvent): void
    {method} +getNextStoryEventById(id: int): StoryEvent
  }

  class Skill {
    {field} +id: int
    {field} +value: int
    {field} +description: String
    {method} + Skill(id: int, val: int, desc: String)
    {method} + setValue(val: int): void
    {method} + getValue(): int
  }

  class Character {
    {field} +sprite: Texture
    {field} +abilities: Skill[]
    {field} +name: String
    {method} +Character()
  }

  class "ModeratorView" as mf {
    {field} +timeoutDuration: int
    {method} +ModeratorView()
    {method} +pausePolling(Boolean): void
    {method} +offlineMode(val: boolean): void
  }

  class "PollEvaluator" as pe {

    {field} possibleDecisions: StoryEvent[]
    {field} timeout: int
    {field} voteCounter: int[]
    {method} +PollEvaluator()
    {method} +checkServerStatus(): void
    {method} +broadcastNextDecision(): void
    {method} +evaluateVotes(): int
    {method} +addVote(): void
  }

  class "ModeratorClientExchange" as mcei <<interface>>{
    {field} +websocket:WebSocket
    {method} +ModeratorClientExchange()
    {method} +getCurrentPollEval(): int
    {method} +makeJSON()
  }
  
  StoryEvent "n" --* "1" StoryGraph
  StoryGraph -- mf
  StoryGraph -- Character
  Character "1" *-- "n" Skill
  mf -- pe
  pe -- mcei
}

package "Server" {
   class "API" as api {
        {field} +observerCollection
        {method} +registerObserver(observer, cookie)
        {method} +unregisterObserver(observer)
        {method} +notifyObservers()
        {method} +updatePossibleDecisions()
        {method} +collectVotes()
  }
  package "Backend" <<Rectangle>>{
    class "ServerShell" as ss {
      {field} +Logger: Logger
      {field} +port: int
      {field} +runShell: boolean
      {field} +serverShell: ServerShell
      {field} +capacity: int
      {field} +bufferedReader: BufferedReader
      {method} +ServerShell()
      {method} +startShell(): void
      {method} +stopShell(): void
      {method} +parseCommand(String): void
      {method} +showHelp(): void
      {method} +configPort(): void
      {method} +configCapacity(): void
      {method} +startServer(): void
      {method} +stopServer(): void
      {method} +main(String[]): void
    }

    class "ClientManager" as cm {
      {field} +webSocket: WebSocket
      {field} +ip
      {field} +port
      {field} +Logger: Logger
      {method} +ClientManager(session: Session): void
      {method} +disconnect(): void
      {method} +onDisconnect(): void
      {method} +recieve(String): void
      {method} +checkJSON(String): void
      {method} +sendMessage(String): void
      {method} +send(String): void
      {method} +recieve(String): void
    }    

    class "MainServerLogic" as msl {
      {field} +moderator: WebClient
      {field} +Logger: Logger
      {method} MainServerLogic(capacity: int, port: int)
      {method} +onFalseMessage(String): void
      {method} +onVotingMessage(String): void

    }

    class "ServerLogger" as sl {
      {field} +GlobalLogger: Logger
      {field} +logFile: FileHandler
      {field} +isSetup: Boolean
      {field} +consoleHandler: Handler
      {method} +setup(): void
      {method} +addHandler(Logger): void
      {method} +setLevel(Level): void
      {method} +setConsoleOutput(boolean): void
    }
  }
  package "PlayerAudience Client" <<Rectangle>>{  
    class "PlayerAudienceClientExchange" as pace <<Observer>>{
      {field} +sessionCookie: Cookie
      {field} +hasVoted: boolean
      {field} +selectedDecision: StoryEvent
      {field} +possibleDecisions: StoryEvent[]
      {method} +update()
      {method} +sendSelectedDecision(): StoryEvent 
    }

    class "PlayerAudienceView" as pav {
      {method} +PlayerAudienceView()
    }
  }
  ss -- msl
  msl - cm
  msl -left- api
  sl ... cm
  sl ... msl
  sl ... api
  sl ... ss
  pace - pav
  api "1" <-up- "n" pace : observes
}

mcei - cm

@enduml